[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\SAURAB~1\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\SAURAB~1\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Oracle Corporation Java 1.8.0_301)
[debug]       Load.loadUnit: plugins took 90.2737ms
[debug]       Load.loadUnit: defsScala took 0.3961ms
[debug] [Loading] Scanning directory C:\Users\Saurabh Ritu\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Saurabh Ritu\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 15.7371 ms
[debug]           Load.resolveProject(global-plugins) took 40.1165ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Saurabh Ritu\.sbt\1.0\plugins, plugins: List(<none>))) took 80.2182ms
[debug] [Loading] Done in C:\Users\Saurabh Ritu\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 100.3482ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2073ms
[debug]     Load.loadUnit(file:/C:/Users/Saurabh%20Ritu/.sbt/1.0/plugins/, ...) took 199.101ms
[debug]   Load.apply: load took 319.8253ms
[debug]   Load.apply: resolveProjects took 5.4403ms
[debug]   Load.apply: finalTransforms took 57.387ms
[debug]   Load.apply: config.delegates took 8.6754ms
[debug]   Load.apply: Def.make(settings)... took 381.6914ms
[debug]   Load.apply: structureIndex took 121.8302ms
[debug]   Load.apply: mkStreams took 1.7626ms
[info] loading global plugins from C:\Users\Saurabh Ritu\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 4896.4903ms
[debug]           Load.loadUnit: plugins took 22.4908ms
[debug]           Load.loadUnit: defsScala took 0.003ms
[debug] [Loading] Scanning directory C:\Users\Saurabh Ritu\IdeaProjects\HelloWorld\project
[debug]             Load.loadUnit: mkEval took 8.3812ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Saurabh Ritu\IdeaProjects\HelloWorld\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.1378 ms
[info] loading settings for project helloworld-build from idea.sbt ...
[debug]               Load.resolveProject(helloworld-build) took 2.0876ms
[debug]             Load.loadTransitive: finalizeProject(Project(id helloworld-build, base: C:\Users\Saurabh Ritu\IdeaProjects\HelloWorld\project, plugins: List(<none>))) took 3.5684ms
[debug] [Loading] Done in C:\Users\Saurabh Ritu\IdeaProjects\HelloWorld\project, returning: (helloworld-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2294.2115ms
[debug]           Load.loadUnit: cleanEvalClasses took 3.6267ms
[debug]         Load.loadUnit(file:/C:/Users/Saurabh%20Ritu/IdeaProjects/HelloWorld/project/, ...) took 2321.1457ms
[debug]       Load.apply: load took 2322.1848ms
[debug]       Load.apply: resolveProjects took 0.1023ms
[debug]       Load.apply: finalTransforms took 7.7973ms
[debug]       Load.apply: config.delegates took 0.2996ms
[debug]       Load.apply: Def.make(settings)... took 84.4597ms
[debug]       Load.apply: structureIndex took 24.2504ms
[debug]       Load.apply: mkStreams took 0.0023ms
[info] loading project definition from C:\Users\Saurabh Ritu\IdeaProjects\HelloWorld\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 7226.0952ms
[debug]     Load.loadUnit: defsScala took 0.0029ms
[debug] [Loading] Scanning directory C:\Users\Saurabh Ritu\IdeaProjects\HelloWorld
[debug]       Load.loadUnit: mkEval took 0.1909ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Saurabh Ritu\IdeaProjects\HelloWorld, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.8413 ms
[info] loading settings for project helloworld from build.sbt ...
[debug]         Load.resolveProject(helloworld) took 38.5737ms
[debug]       Load.loadTransitive: finalizeProject(Project(id helloworld, base: C:\Users\Saurabh Ritu\IdeaProjects\HelloWorld, plugins: List(<none>))) took 43.2627ms
[debug] [Loading] Done in C:\Users\Saurabh Ritu\IdeaProjects\HelloWorld, returning: (helloworld)
[debug]     Load.loadUnit: loadedProjectsRaw took 835.4376ms
[debug]     Load.loadUnit: cleanEvalClasses took 10.4009ms
[debug]   Load.loadUnit(file:/C:/Users/Saurabh%20Ritu/IdeaProjects/HelloWorld/, ...) took 8072.7891ms
[debug] Load.apply: load took 8074.5112ms
[debug] Load.apply: resolveProjects took 0.1387ms
[debug] Load.apply: finalTransforms took 31.429ms
[debug] Load.apply: config.delegates took 0.2779ms
[debug] Load.apply: Def.make(settings)... took 75.233ms
[debug] Load.apply: structureIndex took 21.4236ms
[debug] Load.apply: mkStreams took 0.0034ms
[info] set current project to HelloWorld (in build file:/C:/Users/Saurabh%20Ritu/IdeaProjects/HelloWorld/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 53599 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 53599, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to HelloWorld (in build file:/C:/Users/Saurabh%20Ritu/IdeaProjects/HelloWorld/)
[debug] > Exec(idea-shell, None, None)
